package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.OpticalDistanceSensor;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.hardware.Blinker;


@TeleOp(name = "Mech")

public class MechaTeleOp extends LinearOpMode {

    private DcMotor motor1 = null;
    private DcMotor motor2 = null;
    private DcMotor motor3 = null;
    private DcMotor motor4 = null;
    private DcMotor motor5 = null; //slide control right
    private DcMotor motor6 = null; //slide control left
    // private CRServo CRR = null;
    // private CRServo CRL = null;
    
    /*
        
    */
    @Override
    public void runOpMode() {
        
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        
        motor1 = hardwareMap.get(DcMotor.class,"front left"); //frontleft, port 0
        motor2 = hardwareMap.get(DcMotor.class,"front right");  //frontright, port 1
        motor3 = hardwareMap.get(DcMotor.class,"back left"); //backleft, port 3
        motor4 = hardwareMap.get(DcMotor.class,"back right");  //backright, port 2
        motor5 = hardwareMap.get(DcMotor.class, "slide right");
        motor6 = hardwareMap.get(DcMotor.class, "slide left");
        //motor7 = hardwareMap.get(DcMotor.class, "flip 1");
        //motor8 = hardwareMap.get(DcMotor.class, "spin 1");
        // CRR = hardwareMap.get(CRServo.class, "CR1");
        // CRL = hardwareMap.get(CRServo.class, "CR2");
        
        
        motor1.setDirection(DcMotor.Direction.FORWARD);
        motor2.setDirection(DcMotor.Direction.REVERSE);
        motor3.setDirection(DcMotor.Direction.FORWARD);
        motor4.setDirection(DcMotor.Direction.REVERSE);
        //motor7.setDirection(DcMotor.RunMode.RUN_USING_ENCODER);
        
        waitForStart();

        while (opModeIsActive()) {
            
            telemetry.addData("Status", "Active");
            telemetry.update();
        

            double forwardMotion;
            double horizonMotion;
            double rotateMotion;
            
            forwardMotion = gamepad1.right_stick_y;
            horizonMotion = gamepad1.right_stick_x;
            rotateMotion = gamepad1.left_stick_x;
          
            double denominator = Math.max(Math.abs(forwardMotion) + Math.abs(horizonMotion) + Math.abs(rotateMotion), 1);
            double m1Power = (forwardMotion + horizonMotion + rotateMotion) / denominator;
            double m2Power = (forwardMotion + horizonMotion - rotateMotion) / denominator;
            double m3Power = (forwardMotion - horizonMotion + rotateMotion) / denominator;
            double m4Power = (forwardMotion - horizonMotion - rotateMotion) / denominator;
            double m5Power = gamepad2.right_stick_y/2;
            double m6Power = -gamepad2.right_stick_y/2;
            
            motor1.setPower(m1Power);
            motor2.setPower(m2Power);
            motor3.setPower(m3Power);
            motor4.setPower(m4Power);
            motor5.setPower(m5Power);
            motor6.setPower(m6Power);
            
            /*
            if (gamepad2.right_bumper) {
                
            } else if (gamepad2.left_bumper) {
                
            }
            */
            
            telemetry.addData("m1:", m1Power);            
            telemetry.addData("m2:", m2Power);
            telemetry.addData("m3:", m3Power);
            telemetry.addData("m4:", m4Power);
            telemetry.addData("m5:", m5Power);
            telemetry.addData("m6:", m6Power);
            telemetry.addData("FM:", forwardMotion);
            telemetry.addData("HM:", horizonMotion);
            telemetry.addData("RM:", rotateMotion);
            telemetry.addData("Slide Pos:", m5Power+m6Power/2);
            telemetry.addData("Status", "Running");
            telemetry.update();

        }
    }
}
