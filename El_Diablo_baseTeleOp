package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;

@TeleOp(name = "El_Diablo")

public class El_Diablo extends LinearOpMode {

    private DcMotor motor1 = null;
    private DcMotor motor2 = null;
    private DcMotor motor3 = null;
    private DcMotor motor4 = null;
    private DcMotorSimple motor5 = null;
    private DcMotor motor6 = null;
    private CRServo servo1 = null;
    private CRServo servo2 = null;
    private CRServo servo3 = null;
    private CRServo servo4 = null;

    @Override
    public void runOpMode() {
        
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        
        motor1 = hardwareMap.get(DcMotor.class,"front left"); //frontleft, port 0
        motor2 = hardwareMap.get(DcMotor.class,"front right");  //frontright, port 1
        motor3 = hardwareMap.get(DcMotor.class,"back left"); //backleft, port 3
        motor4 = hardwareMap.get(DcMotor.class,"back right");  //backright, port 2
        motor5 = hardwareMap.get(DcMotorSimple.class, "slide");
        motor6 = hardwareMap.get(DcMotor.class, "arm");
        servo1 = hardwareMap.get(CRServo.class, "servo1"); //servo base
        servo2 = hardwareMap.get(CRServo.class, "servo2"); //servo carousel
        servo3 = hardwareMap.get(CRServo.class, "servo3");
        servo4 = hardwareMap.get(CRServo.class, "servo4");
        
        motor1.setDirection(DcMotor.Direction.REVERSE);
        motor2.setDirection(DcMotor.Direction.FORWARD);
        motor3.setDirection(DcMotor.Direction.REVERSE);
        motor4.setDirection(DcMotor.Direction.FORWARD);
        
        waitForStart();

        while (opModeIsActive()) {
            
            double m1Power;
            double m2Power;
            double m3Power;
            double m4Power;
            double m6Power;

            m1Power = -gamepad1.left_stick_y/2;
            m2Power = -gamepad1.right_stick_y/2;
            m3Power = -gamepad1.left_stick_y/2;
            m4Power = -gamepad1.right_stick_y/2;
            m6Power = gamepad1.right_trigger-gamepad1.left_trigger;
            
            motor1.setPower(m1Power);
            motor2.setPower(m2Power);
            motor3.setPower(m3Power);
            motor4.setPower(m4Power);
            motor6.setPower(m6Power);
                
            if (gamepad1.dpad_right) {
                servo1.setPower(1);
            } else if (gamepad1.dpad_left){
                servo1.setPower(-1);
            } else {
                servo1.setPower(0);
            }
            
            if (gamepad1.a){
               servo4.setPower(1);
               servo3.setPower(-1);
            } else if (gamepad1.b) {
                servo4.setPower(-1);
                servo3.setPower(1);
            } else {
                servo3.setPower(0);
                servo4.setPower(0);
            }
            
            if (gamepad1.right_bumper) {
                motor5.setPower(.7);
            } else if (gamepad1.left_bumper) {
                motor5.setPower(-0.7);
            } else {
                motor5.setPower(0);
            }
            
          
            /*double CRSP;
            CRSP = gamepad2.right_stick_y;
            servo1.setPower(CRSP);
            double CRS = gamepad2.right_stick_y;*/
   /*
            if (gamepad1.right_bumper) {
                motor1.setDirection(DcMotor.Direction.FORWARD);
                motor2.setDirection(DcMotor.Direction.REVERSE);
                motor3.setDirection(DcMotor.Direction.REVERSE);
                motor4.setDirection(DcMotor.Direction.FORWARD);
            } else {
                motor1.setDirection(DcMotor.Direction.FORWARD);
                motor2.setDirection(DcMotor.Direction.REVERSE);
                motor3.setDirection(DcMotor.Direction.FORWARD);
                motor4.setDirection(DcMotor.Direction.REVERSE);
            }
    */
            telemetry.addData("Status", "Running");
            telemetry.update();

        }
    }
}
